---
import { Image } from 'astro:assets';

export interface Props {
  images: Array<{
    src: any;
    thumb?: any;
    alt?: string;
    description?: string;
    title?: string;
  }>;
  columns?: number;
  gap?: string;
  lightbox?: boolean;
}

const { images, columns = 3, gap = "1rem", lightbox = true } = Astro.props;
---

<div class="gallery" style={`--columns: ${columns}; --gap: ${gap};`}>
  {images.map((image, index) => (
    lightbox ? (
      <a 
        href={image.src.src || image.src} 
        class="glightbox gallery-item"
        data-gallery="gallery"
        data-title={image.title}
        data-description={image.description}
      >
        <Image 
          src={image.thumb || image.src} 
          alt={image.alt || `Gallery image ${index + 1}`}
          width={400}
          height={300}
          class="gallery-image"
        />
        {image.title && (
          <div class="gallery-caption">
            {image.title}
          </div>
        )}
      </a>
    ) : (
      <div class="gallery-item">
        <Image 
          src={image.thumb || image.src} 
          alt={image.alt || `Gallery image ${index + 1}`}
          width={400}
          height={300}
          class="gallery-image"
        />
        {image.title && (
          <div class="gallery-caption">
            {image.title}
          </div>
        )}
      </div>
    )
  ))}
</div>

<style>
  .gallery {
    display: grid;
    grid-template-columns: repeat(var(--columns), 1fr);
    gap: var(--gap);
    margin: 2rem 0;
  }
  
  @media (max-width: 768px) {
    .gallery {
      grid-template-columns: repeat(2, 1fr);
    }
  }
  
  @media (max-width: 480px) {
    .gallery {
      grid-template-columns: 1fr;
    }
  }
  
  .gallery-item {
    position: relative;
    display: block;
    overflow: hidden;
    border-radius: 8px;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    transition: transform 0.3s ease, box-shadow 0.3s ease;
    cursor: pointer;
    text-decoration: none;
  }
  
  .gallery-item:hover {
    transform: translateY(-2px);
    box-shadow: 0 8px 25px rgba(0, 0, 0, 0.2);
  }
  
  .gallery-image {
    width: 100%;
    height: 250px;
    object-fit: cover;
    transition: transform 0.3s ease;
  }
  
  .gallery-item:hover .gallery-image {
    transform: scale(1.05);
  }
  
  .gallery-caption {
    position: absolute;
    bottom: 0;
    left: 0;
    right: 0;
    background: linear-gradient(transparent, rgba(0, 0, 0, 0.8));
    color: white;
    padding: 1rem;
    font-size: 0.9rem;
    font-weight: 500;
    text-shadow: 0 1px 2px rgba(0, 0, 0, 0.5);
    transform: translateY(100%);
    transition: transform 0.3s ease;
  }
  
  .gallery-item:hover .gallery-caption {
    transform: translateY(0);
  }
  
  /* Terminal theme integration */
  .gallery-item {
    border: 2px solid transparent;
  }
  
  .gallery-item:hover {
    border-color: var(--accent);
  }
  
  /* Dark mode support */
  @media (prefers-color-scheme: dark) {
    .gallery-item {
      box-shadow: 0 4px 6px rgba(255, 255, 255, 0.1);
    }
    
    .gallery-item:hover {
      box-shadow: 0 8px 25px rgba(255, 255, 255, 0.2);
    }
  }
</style>